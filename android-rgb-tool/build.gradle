apply plugin: 'com.android.application'

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("compileSdk")
    buildToolsVersion globalConfiguration.getAt("buildTools")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("minSdk")
        targetSdkVersion globalConfiguration.getAt("targetSdk")
        versionCode 13
        versionName "2.0.0-SNAPSHOT"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    //noinspection GroovyAssignabilityCheck
    if (project.hasProperty("RGBTool.signing.properties")
            && new File(project.property("RGBTool.signing.properties")).exists()) {

        Properties props = new Properties()
        props.load(new FileInputStream(file(project.property("RGBTool.signing.properties"))))

        signingConfigs {
            release {
                storeFile file(props['keystore'])
                storePassword props['keystore.password']
                keyAlias props['keyAlias']
                keyPassword props['keyPassword']
            }
        }

        buildTypes {
            release {
                minifyEnabled true
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
                signingConfig signingConfigs.release
            }
        }
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }
}

dependencies {
    def globalConfiguration = rootProject.extensions.getByName("ext")
    def appDependencies = globalConfiguration.appDependencies
    def appTestDependencies = globalConfiguration.appTestDependencies
    def appAndroidTestDependencies = globalConfiguration.appAndroidTestDependencies

    implementation appDependencies.appCompat
    implementation appDependencies.cardView
    implementation appDependencies.recyclerView
    implementation appDependencies.palette
    implementation appDependencies.design
    implementation appDependencies.customTabs
    implementation appDependencies.percent
    implementation appDependencies.photoView
    implementation appDependencies.picasso
    implementation appDependencies.butterKnife
    annotationProcessor appDependencies.butterKnifeCompiler
    implementation appDependencies.eventBus
    implementation appDependencies.rxAndroid
    implementation appDependencies.timber
    implementation appDependencies.glide

    implementation fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    implementation project(':model')

    // Testing dependencies
    testImplementation appTestDependencies.jUnit
    testImplementation appTestDependencies.mockito
    androidTestImplementation appAndroidTestDependencies.espressoCore
    androidTestImplementation appAndroidTestDependencies.testRunner
    androidTestImplementation appAndroidTestDependencies.testRules
    androidTestImplementation appAndroidTestDependencies.supportAnnotation
}

tasks.matching { it instanceof Test }.all {
    testLogging.events = ["failed", "passed", "skipped"]
}
